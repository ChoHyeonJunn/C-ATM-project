#pragma once
class ATM {
protected:				//파생클래스에서 접근가능하도록 protected로 선언
	int amount;			//입금, 출금, 이체 시 금액
	int login_check;	//사용자, 매니저 로그인 시 잘 이루어졌는지 체크하는 변수

public:	
	virtual int login() = 0;
	virtual void withdraw() = 0;
	virtual void deposit() = 0;
	virtual void checkAccount() = 0;

	/*완전 가상함수(pure virtual function)는 함수의 정의없이 함수의 유형만을 기반 클래스에 제시해 놓는 것이다.
	완전 가상함수는 가상함수처럼 멤버함수를 선언할 때 예약어 virtual을 선언문의 맨 앞에 붙이고 함수의 선언
	문 마지막 부분에 ‘=0’을 덧붙인다. 이렇게 선언된 멤버함수는 함수의 몸체 부분이 없다.
	*/
	/*
	추상클래스 ATM
	추상클래스를 상속받는 파생클래스는 완전가상함수를 반드시 구현해야하는 강제성을
	부여받게 된다. 이 작업을 해야 어떻게 함수가 동작하는지 정의하게 되고 객체를 생성할 수 있다.
	만약 가상함수를 오버라이딩 하지 않은 파생 클래스는 다시 추상클래스가 되어 객체를 생성하지 못하게 된다.

	이 경우 ATM의 가장 기본적인 기능이라고 할 수 있는 
	로그인 / 입금 / 출금 / 확인 작업을 완전가상함수로 가지고 있는 추상 클래스를 기반클래스로
	기술하고, 비슷한 성질의 Client를 위한 ATM / Manager를 위한 ATM 클래스를 만들어
	위 기능들을 오버라이딩 하여 각 파생클래스에서 생성된 객체에서 동일한 이름의 함수를
	호출할 수 있도록 구현하였다.
	*/
};